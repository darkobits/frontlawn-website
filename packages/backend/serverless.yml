service:
  name: inspirat
plugins:
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-webpack


# ----- Custom Config Data -----------------------------------------------------

custom:
  stage: ${opt:stage, 'dev'}
  basePaths:
    dev: inspirat-dev
    prod: inspirat
  # Configuration for the serverless-dotenv plugin.
  dotenv:
    include:
      - UNSPLASH_ACCESS_KEY
      - UNSPLASH_SECRET_KEY
      - UNSPLASH_COLLECTION_ID
  # Configuration for serverless-domain-manager plugin.
  customDomain:
    domainName: aws.frontlawn.net
    endpointType: regional
    basePath: ${self:custom.basePaths.${self:custom.stage}}
    stage: ${self:custom.stage}
    createRoute53Record: true


# ----- Serverless Compute Provider Configuration ------------------------------

provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:AWS_REGION}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    # AWS_REGION: ${env:AWS_REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:*:*:table/inspirat-${self:custom.stage}
    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:*:*:inspirat-${self:custom.stage}


# ----- Functions --------------------------------------------------------------

functions:
  # Queries the Unsplash Collection API and adds any new photos from the
  # collection to the SQS queue for further processing. Deletes any photos from
  # the database that are not present in the collection response from Unsplash.
  sync-collection:
    events:
      - schedule:
          name: sync-collection-${self:custom.stage}
          description: 'Sync collection from Unsplash.'
          rate: rate(1 hour)
    handler: src/sync-collection.default
    environment:
      UNSPLASH_ACCESS_KEY: ${env:UNSPLASH_ACCESS_KEY}
      UNSPLASH_COLLECTION_ID: ${env:UNSPLASH_COLLECTION_ID}
    timeout: 120
  # Periodically checks the SQS queue for messages representing new photos. For
  # each, queries the Unsplash Photos API and adds a record for the photo to the
  # database. This function is run on a schedule rather than via SQS triggers
  # because we want to spread this operation out over time so that we don't hit
  # the Unsplash API rate limit.
  update-records:
    events:
      - schedule:
          name: update-records-${self:custom.stage}
          description: 'Update the database with new photos.'
          rate: rate(15 minutes)
    handler: src/update-records.default
    environment:
      UNSPLASH_ACCESS_KEY: ${env:UNSPLASH_ACCESS_KEY}
    timeout: 120
  # Returns all photos from the database. This is the only function exposed via
  # API Gateway.
  get-photos:
    events:
      - http:
          method: GET
          path: photos
          cors: true
          origin: '*'
    handler: src/get-photos.default


# ----- CloudFormation Resource Templates --------------------------------------

resources:
  Resources:
    # DynamoDB Tables
    InspiratDatabase:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: inspirat-${self:custom.stage}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Queues
    InspiratQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: inspirat-${self:custom.stage}
        VisibilityTimeout: 120
